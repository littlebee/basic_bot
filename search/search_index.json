{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"og_original_goals/","text":"The goals for this project are: 1. provide significantly simpler alternative to ROS 1. run stand-alone; decentralized 1. install and run on small SBCs like raspberry pi 1. distribute a pip package 1. maybe distribute a npm package for the typescript web components 1. simplify getting started on new projects. This would ideally be something like: pip3 install basic_bot python3 basic_bot:create my_new_robot_project which would - - create a project directory ( mkdir my_new_robot_project ) with start, stop, upload scripts; - cd to that directory - create .gitignore file from basic python template with additions for logs/ pids/ etc. - create logs/ directory - create pids/ directory - create src/ directory - create webapp/ directory and populate it with a basic vite starter project in Typescript Much of the design originally will come from https://github.com/littlebee/strongarm and strip it down to just the parts that are used for all bots like central-hub, with optional submodules for things like Raspberry Pi system stats, servo control, motor control, vision, and image object recognition. My intent is to later update strongarm to use this package instead of it's own versions of some of these subsystems.","title":"Og original goals"},{"location":"commons/base_camera/","text":"basic_bot.commons.base_camera This was originally pilfered from https://github.com/adeept/Adeept_RaspTank/blob/a6c45e8cc7df620ad8977845eda2b839647d5a83/server/base_camera.py Which looks like it was in turn pilfered from https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited Thank you, @adeept and @miguelgrinberg! CameraEvent Objects class CameraEvent(object) An Event-like class that signals all active clients when a new frame is available. wait def wait() -> bool Invoked from each client's thread to wait for the next frame. set def set() -> None Invoked by the camera thread when a new frame is available. clear def clear() -> None Invoked from each client's thread after a frame was processed. BaseCamera Objects class BaseCamera(object) frame current frame is stored here by background thread __init__ def __init__() -> None Start the background camera thread if it isn't running yet. get_frame def get_frame() -> Optional[bytes] Return the current camera frame. frames @staticmethod def frames() -> Generator[bytes, None, None] \"Generator that returns frames from the camera.","title":"base_camera"},{"location":"commons/base_camera/#basic_botcommonsbase_camera","text":"This was originally pilfered from https://github.com/adeept/Adeept_RaspTank/blob/a6c45e8cc7df620ad8977845eda2b839647d5a83/server/base_camera.py Which looks like it was in turn pilfered from https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited Thank you, @adeept and @miguelgrinberg!","title":"basic_bot.commons.base_camera"},{"location":"commons/base_camera/#cameraevent-objects","text":"class CameraEvent(object) An Event-like class that signals all active clients when a new frame is available.","title":"CameraEvent Objects"},{"location":"commons/base_camera/#wait","text":"def wait() -> bool Invoked from each client's thread to wait for the next frame.","title":"wait"},{"location":"commons/base_camera/#set","text":"def set() -> None Invoked by the camera thread when a new frame is available.","title":"set"},{"location":"commons/base_camera/#clear","text":"def clear() -> None Invoked from each client's thread after a frame was processed.","title":"clear"},{"location":"commons/base_camera/#basecamera-objects","text":"class BaseCamera(object)","title":"BaseCamera Objects"},{"location":"commons/base_camera/#frame","text":"current frame is stored here by background thread","title":"frame"},{"location":"commons/base_camera/#__init__","text":"def __init__() -> None Start the background camera thread if it isn't running yet.","title":"__init__"},{"location":"commons/base_camera/#get_frame","text":"def get_frame() -> Optional[bytes] Return the current camera frame.","title":"get_frame"},{"location":"commons/base_camera/#frames","text":"@staticmethod def frames() -> Generator[bytes, None, None] \"Generator that returns frames from the camera.","title":"frames"},{"location":"commons/camera_opencv/","text":"basic_bot.commons.camera_opencv This was originally pilfered from https://github.com/adeept/Adeept_RaspTank/blob/a6c45e8cc7df620ad8977845eda2b839647d5a83/server/camera_opencv.py Which looks like it was in turn pilfered from https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited","title":"camera_opencv"},{"location":"commons/camera_opencv/#basic_botcommonscamera_opencv","text":"This was originally pilfered from https://github.com/adeept/Adeept_RaspTank/blob/a6c45e8cc7df620ad8977845eda2b839647d5a83/server/camera_opencv.py Which looks like it was in turn pilfered from https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited","title":"basic_bot.commons.camera_opencv"},{"location":"commons/constants/","text":"basic_bot.commons.constants","title":"constants"},{"location":"commons/constants/#basic_botcommonsconstants","text":"","title":"basic_bot.commons.constants"},{"location":"commons/env/","text":"basic_bot.commons.env Simple utility functions to get typed environment variables with default values. Usage: from basic_bot.commons import env MY_INT = env.env_int(\"MY_INT\", 5800) MY_STRING = env.env_string(\"MY_STRING\", \"default\") MY_FLOAT = env.env_float(\"MY_FLOAT\", 3.14) MY_BOOL = env.env_bool(\"MY_BOOL\", True)","title":"env"},{"location":"commons/env/#basic_botcommonsenv","text":"Simple utility functions to get typed environment variables with default values. Usage: from basic_bot.commons import env MY_INT = env.env_int(\"MY_INT\", 5800) MY_STRING = env.env_string(\"MY_STRING\", \"default\") MY_FLOAT = env.env_float(\"MY_FLOAT\", 3.14) MY_BOOL = env.env_bool(\"MY_BOOL\", True)","title":"basic_bot.commons.env"},{"location":"commons/fps_stats/","text":"basic_bot.commons.fps_stats FpsStats - A class to track overall and floating frames per seconds","title":"fps_stats"},{"location":"commons/fps_stats/#basic_botcommonsfps_stats","text":"FpsStats - A class to track overall and floating frames per seconds","title":"basic_bot.commons.fps_stats"},{"location":"commons/hub_state/","text":"basic_bot.commons.hub_state HubState Objects class HubState() This class manages the local state of the hub. It is initialized with a default initial state and can be updated with new state data. __init__ def __init__(default_state: Dict[str, Any] = {}) -> None Initializes the hub state with the default state. get def get(keys_requested: List[str]) -> Dict[str, Any] Return the requested state data for a list of state keys. update_state_from_message_data def update_state_from_message_data(message_data: Dict[str, Any]) -> None Update state from received message data. serialize_state def serialize_state(keys_requested: Optional[List[str]] = None) -> str Serialize the current state to JSON.","title":"hub_state"},{"location":"commons/hub_state/#basic_botcommonshub_state","text":"","title":"basic_bot.commons.hub_state"},{"location":"commons/hub_state/#hubstate-objects","text":"class HubState() This class manages the local state of the hub. It is initialized with a default initial state and can be updated with new state data.","title":"HubState Objects"},{"location":"commons/hub_state/#__init__","text":"def __init__(default_state: Dict[str, Any] = {}) -> None Initializes the hub state with the default state.","title":"__init__"},{"location":"commons/hub_state/#get","text":"def get(keys_requested: List[str]) -> Dict[str, Any] Return the requested state data for a list of state keys.","title":"get"},{"location":"commons/hub_state/#update_state_from_message_data","text":"def update_state_from_message_data(message_data: Dict[str, Any]) -> None Update state from received message data.","title":"update_state_from_message_data"},{"location":"commons/hub_state/#serialize_state","text":"def serialize_state(keys_requested: Optional[List[str]] = None) -> str Serialize the current state to JSON.","title":"serialize_state"},{"location":"commons/hub_state_monitor/","text":"basic_bot.commons.hub_state_monitor This class updates the local copy of the hub state as subscribed keys are changed. A thread is created to listen for state updates from the central hub. When a state update is received, the local state is updated and the state_updated_at timestamp is updated. HubStateMonitor Objects class HubStateMonitor() This class updates the process local copy of the hub state as subscribed keys are changed. It starts a thread to listen for state updates from the central hub and applies them to the local state via hub_state.update_state_from_message_data. Before applying the state update, it calls the on_state_update callback if it is provided. This allows the caller to do something with the state update before before it is applied to the local state passed via hub_state arg. The state update is applied to the local state via hub_state.update_state_from_message_data regardless of whether the on_state_update callback is provided or the value it returns. To alter the state you should alway send an updateState message to the central hub. connect_to_hub @asynccontextmanager async def connect_to_hub( ) -> AsyncGenerator[websockets.client.WebSocketClientProtocol, None] context manager to connect to the central hub parse_next_message async def parse_next_message( websocket: WebSocketClientProtocol ) -> AsyncGenerator[tuple[str, dict], None] generator function to parse the next central_hub message from the websocket","title":"hub_state_monitor"},{"location":"commons/hub_state_monitor/#basic_botcommonshub_state_monitor","text":"This class updates the local copy of the hub state as subscribed keys are changed. A thread is created to listen for state updates from the central hub. When a state update is received, the local state is updated and the state_updated_at timestamp is updated.","title":"basic_bot.commons.hub_state_monitor"},{"location":"commons/hub_state_monitor/#hubstatemonitor-objects","text":"class HubStateMonitor() This class updates the process local copy of the hub state as subscribed keys are changed. It starts a thread to listen for state updates from the central hub and applies them to the local state via hub_state.update_state_from_message_data. Before applying the state update, it calls the on_state_update callback if it is provided. This allows the caller to do something with the state update before before it is applied to the local state passed via hub_state arg. The state update is applied to the local state via hub_state.update_state_from_message_data regardless of whether the on_state_update callback is provided or the value it returns. To alter the state you should alway send an updateState message to the central hub.","title":"HubStateMonitor Objects"},{"location":"commons/hub_state_monitor/#connect_to_hub","text":"@asynccontextmanager async def connect_to_hub( ) -> AsyncGenerator[websockets.client.WebSocketClientProtocol, None] context manager to connect to the central hub","title":"connect_to_hub"},{"location":"commons/hub_state_monitor/#parse_next_message","text":"async def parse_next_message( websocket: WebSocketClientProtocol ) -> AsyncGenerator[tuple[str, dict], None] generator function to parse the next central_hub message from the websocket","title":"parse_next_message"},{"location":"commons/log/","text":"basic_bot.commons.log debug def debug(message: str) -> None Flush debug message to console only in development and test environments info def info(message: str) -> None Flush message to console error def error(message: str) -> None Flush error message to console","title":"log"},{"location":"commons/log/#basic_botcommonslog","text":"","title":"basic_bot.commons.log"},{"location":"commons/log/#debug","text":"def debug(message: str) -> None Flush debug message to console only in development and test environments","title":"debug"},{"location":"commons/log/#info","text":"def info(message: str) -> None Flush message to console","title":"info"},{"location":"commons/log/#error","text":"def error(message: str) -> None Flush error message to console","title":"error"},{"location":"commons/messages/","text":"basic_bot.commons.messages","title":"messages"},{"location":"commons/messages/#basic_botcommonsmessages","text":"","title":"basic_bot.commons.messages"},{"location":"commons/persist_state/","text":"basic_bot.commons.persist_state PersistState Objects class PersistState() Class to handle persisting the bot state to a file. persist_state def persist_state() -> None Persist the current state to a file.","title":"persist_state"},{"location":"commons/persist_state/#basic_botcommonspersist_state","text":"","title":"basic_bot.commons.persist_state"},{"location":"commons/persist_state/#persiststate-objects","text":"class PersistState() Class to handle persisting the bot state to a file.","title":"PersistState Objects"},{"location":"commons/persist_state/#persist_state","text":"def persist_state() -> None Persist the current state to a file.","title":"persist_state"},{"location":"commons/pytorch_detect/","text":"basic_bot.commons.pytorch_detect This class objects in frames it gets from the camera object passed to the constructor. A thread is created that does the heavy lifting of detecting objects and updates a class var that contains the last faces detected. This allows the thread providing the video feed to stream at 30fps while face frames lag behind at 3fps (maybe upto 10?)","title":"pytorch_detect"},{"location":"commons/pytorch_detect/#basic_botcommonspytorch_detect","text":"This class objects in frames it gets from the camera object passed to the constructor. A thread is created that does the heavy lifting of detecting objects and updates a class var that contains the last faces detected. This allows the thread providing the video feed to stream at 30fps while face frames lag behind at 3fps (maybe upto 10?)","title":"basic_bot.commons.pytorch_detect"},{"location":"commons/recognition_provider/","text":"basic_bot.commons.recognition_provider This class detects objects in frames it gets from the camera object passed to the constructor. A thread is created that does the heavy lifting of detecting objects and updates a class var that contains the last faces detected. This allows the thread providing the video feed to stream at 30fps while detect frames lag behind","title":"recognition_provider"},{"location":"commons/recognition_provider/#basic_botcommonsrecognition_provider","text":"This class detects objects in frames it gets from the camera object passed to the constructor. A thread is created that does the heavy lifting of detecting objects and updates a class var that contains the last faces detected. This allows the thread providing the video feed to stream at 30fps while detect frames lag behind","title":"basic_bot.commons.recognition_provider"},{"location":"commons/servo/","text":"basic_bot.commons.servo Servo Objects class Servo() The servo motors & gearing for shelly-bot's neck ended up being way too fast and jerky. This class uses a thread to slowly step the motor to the destination angle. The step_delay can be adjusted to speed up or slow down the movement. The thread can be paused and resumed.","title":"servo"},{"location":"commons/servo/#basic_botcommonsservo","text":"","title":"basic_bot.commons.servo"},{"location":"commons/servo/#servo-objects","text":"class Servo() The servo motors & gearing for shelly-bot's neck ended up being way too fast and jerky. This class uses a thread to slowly step the motor to the destination angle. The step_delay can be adjusted to speed up or slow down the movement. The thread can be paused and resumed.","title":"Servo Objects"},{"location":"commons/tflite_detect/","text":"basic_bot.commons.tflite_detect This class provides object detection using Tensor Flow Lite.","title":"tflite_detect"},{"location":"commons/tflite_detect/#basic_botcommonstflite_detect","text":"This class provides object detection using Tensor Flow Lite.","title":"basic_bot.commons.tflite_detect"},{"location":"commons/web_utils/","text":"basic_bot.commons.web_utils","title":"web_utils"},{"location":"commons/web_utils/#basic_botcommonsweb_utils","text":"","title":"basic_bot.commons.web_utils"},{"location":"scripts/bb_create/","text":"basic_bot.bb_create Usage: bb_create <new_project_directory_name> Description: Create a new robot project directory with the given name. The new project will contain a basic bot project structure with some example code and scripts to get you started. The new project will be created in the current working directory.","title":"bb_create"},{"location":"scripts/bb_create/#basic_botbb_create","text":"Usage: bb_create <new_project_directory_name> Description: Create a new robot project directory with the given name. The new project will contain a basic bot project structure with some example code and scripts to get you started. The new project will be created in the current working directory.","title":"basic_bot.bb_create"},{"location":"scripts/bb_restart/","text":"basic_bot.bb_restart","title":"bb_restart"},{"location":"scripts/bb_restart/#basic_botbb_restart","text":"","title":"basic_bot.bb_restart"},{"location":"scripts/bb_start/","text":"basic_bot.bb_start","title":"bb_start"},{"location":"scripts/bb_start/#basic_botbb_start","text":"","title":"basic_bot.bb_start"},{"location":"scripts/bb_stop/","text":"basic_bot.bb_stop","title":"bb_stop"},{"location":"scripts/bb_stop/#basic_botbb_stop","text":"","title":"basic_bot.bb_stop"}]}