{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"basic_bot A Python centric, basic robotics platform providing an ultra lightweight, websockets based pub/sub service hardware support for various motors, servos, sensors support for vision and in frame object detection a simple bb_create script for creating new projects Status *** This is still a work in progress *** Updates 20250127 - It can see! Working basic_bot.services.vision_cv service that uses open cv2 and tensorflow lite. Still trying to decide what else is needed in the beta version - support for GPIO in? Doing this in parallel with implementing the first working example of using basic_bot - daphbot-due 20250120 - Basic working central_hub and web_server services merged. Working on adding basic motor controller service similar to Scatbot. Getting Started On your development computer (not your bot's onboard computer; see later in this doc) python3 -m pip install git+https://github.com/littlebee/basic_bot.git@main bb_create my_new_project_dir The above commands will install the basic_bot python libs and scripts like bb_create , bb_start , bb_stop create a project directory named my_new_robot_project add files for the basic shell of a webapp add test of webapp add files for example service that increments a counter add test for example service add start.sh, stop.sh, upload.sh scripts to my_new_project_dir/ add build.sh and test.sh scripts to my_new_project_dir/ run build.sh and test.sh scripts After `bb_create` finishes you should be able to ```shell cd my_new_robot_project Everything created is yours to edit bb_create is single use per project and will not overwrite an existing directory. The created app should run on any OS supported by Python >= 3.9 with a Posix compliant shell. I've tested this assertion on macOS >= 14.7 and on Raspberry PI 4 with Raspian Bullseye. Additionally, the CI/CD test system for this project validates that everything works on ubuntu-latest . Python >= 3.9 is required. It's also a good idea to make sure python and pip commands are pointing to the correct version (3.9) if you are using a virtual environment like Anaconda or Miniconda. To build and use the created ./webapp example, you must have Node.js >= v20.18, and npm needs to be in your path. From there, check out the .sh files in the root of my_new_robot_project. Commands to build, start in the background, run integration tests for the Python example \"worthless_counter\" service, and run example integration test. Kicking the tires locally You can start the services locally in the background (from your project root dir on dev machine): ./start.sh ... which will start all services in the services.cfg file. Each service runs in as a process. You can start a hot development web server that will show your changes to the webapp/ code in near real time most of the time :). cd webapp npm run dev For more information about hacking on the code, running tests, and debugging, see CONTRIBUTING.md . Upload to your robot Also included is an example upload.sh script that can be used to upload your code to your robot's onboard computer. The example upload.sh uses rsync and requires that both your local and onboard computer need to have SSH installed and properly set up. If you can ssh my_rad_robot.local or by IP, you should be able to use rsync and the upload example. Example: ./upload.sh pi@my_raspberry_bot.local /home/pi/my_bot pi above is the username my_raspberry_bot.local above is the hostname to upload can be replaced by IPAddress /home/pi/my_bot is the directory you wish to upload to. The directory will be created if it does not already exist. Notes: I work on a macbook and use iTerm2 for terminal. One of the additions I like to make to the standard setup, is to use the same user name on the Pi that I use locally on my mac. This allows not having to type ssh raspberry@mybot.local , because the name is the same just ssh mybot.local works. I also like to add my public key to the ~/.ssh/authorized_keys file on the remote SBC. This will stop it from prompting you for the password on every SSH command (upload.sh uses rsync which uses ssh). I made a gist of the script I use to upload my public key to new boards. Run the software on your robot First ssh into the onboard computer and cd path/uploaded/to . Before running for the first time, in an ssh shell, install the basic_bot package: python3 -m pip install git+https://github.com/littlebee/basic_bot.git@main Then from within the the directory you uploaded to: ./start.sh will start all of the services in ./services.cfg as individual processes running detached. If your shell/terminal is closed, they will keep running. You can debug issues with a service by looking at the ./logs/* files for each service. Adding your own UI, too? Ya sure, you betcha! The created my_new_robot_project/webapp is just an example of how to interact with central_hub. You can add your own content or completely replace it with say Next.js if that is your thing. The created ./webapp is currently a Vite app, created with yarn create vite . The -m basic_bot.services.web_server service currently is hard coded (TODO: fix) to look in ./webapp/dist for index.html and the rest is up to the app. If you're want to use another frontend framework, you should be able to symbolic link where ever that framework's bundler puts it's build assets like index.html to ./webapp/dist Will it run on Windows? Answer is IDK, yet. Wherever possible, I've tried to use the cross-platform pure Python file system abstraction. If you look at the start.sh and stop.sh scripts in the root of the created project, you will see that those just call scripts which pip3 install or conda install , via SetupTools should have installed globally assuming pip3 is in your environment. So maybe ./start.sh does nothing on Windows, but bb_start will? Add a .bat file; maybe just rename .sh -> .bat? [Waves arms; not a windows user for years] TODO: add links to other bots using their own components as examples (like strongarm) How it all works TODO add updated version of How It All Works from strongarm + scatbot https://github.com/littlebee/strongarm/blob/main/README.md#how-it-all-works","title":"README.md"},{"location":"#basic_bot","text":"A Python centric, basic robotics platform providing an ultra lightweight, websockets based pub/sub service hardware support for various motors, servos, sensors support for vision and in frame object detection a simple bb_create script for creating new projects","title":"basic_bot"},{"location":"#status","text":"*** This is still a work in progress ***","title":"Status"},{"location":"#updates","text":"20250127 - It can see! Working basic_bot.services.vision_cv service that uses open cv2 and tensorflow lite. Still trying to decide what else is needed in the beta version - support for GPIO in? Doing this in parallel with implementing the first working example of using basic_bot - daphbot-due 20250120 - Basic working central_hub and web_server services merged. Working on adding basic motor controller service similar to Scatbot.","title":"Updates"},{"location":"#getting-started","text":"On your development computer (not your bot's onboard computer; see later in this doc) python3 -m pip install git+https://github.com/littlebee/basic_bot.git@main bb_create my_new_project_dir The above commands will install the basic_bot python libs and scripts like bb_create , bb_start , bb_stop create a project directory named my_new_robot_project add files for the basic shell of a webapp add test of webapp add files for example service that increments a counter add test for example service add start.sh, stop.sh, upload.sh scripts to my_new_project_dir/ add build.sh and test.sh scripts to my_new_project_dir/ run build.sh and test.sh scripts After `bb_create` finishes you should be able to ```shell cd my_new_robot_project","title":"Getting Started"},{"location":"#everything-created-is-yours-to-edit","text":"bb_create is single use per project and will not overwrite an existing directory. The created app should run on any OS supported by Python >= 3.9 with a Posix compliant shell. I've tested this assertion on macOS >= 14.7 and on Raspberry PI 4 with Raspian Bullseye. Additionally, the CI/CD test system for this project validates that everything works on ubuntu-latest . Python >= 3.9 is required. It's also a good idea to make sure python and pip commands are pointing to the correct version (3.9) if you are using a virtual environment like Anaconda or Miniconda. To build and use the created ./webapp example, you must have Node.js >= v20.18, and npm needs to be in your path. From there, check out the .sh files in the root of my_new_robot_project. Commands to build, start in the background, run integration tests for the Python example \"worthless_counter\" service, and run example integration test.","title":"Everything created is yours to edit"},{"location":"#kicking-the-tires-locally","text":"You can start the services locally in the background (from your project root dir on dev machine): ./start.sh ... which will start all services in the services.cfg file. Each service runs in as a process. You can start a hot development web server that will show your changes to the webapp/ code in near real time most of the time :). cd webapp npm run dev For more information about hacking on the code, running tests, and debugging, see CONTRIBUTING.md .","title":"Kicking the tires locally"},{"location":"#upload-to-your-robot","text":"Also included is an example upload.sh script that can be used to upload your code to your robot's onboard computer. The example upload.sh uses rsync and requires that both your local and onboard computer need to have SSH installed and properly set up. If you can ssh my_rad_robot.local or by IP, you should be able to use rsync and the upload example. Example: ./upload.sh pi@my_raspberry_bot.local /home/pi/my_bot pi above is the username my_raspberry_bot.local above is the hostname to upload can be replaced by IPAddress /home/pi/my_bot is the directory you wish to upload to. The directory will be created if it does not already exist. Notes: I work on a macbook and use iTerm2 for terminal. One of the additions I like to make to the standard setup, is to use the same user name on the Pi that I use locally on my mac. This allows not having to type ssh raspberry@mybot.local , because the name is the same just ssh mybot.local works. I also like to add my public key to the ~/.ssh/authorized_keys file on the remote SBC. This will stop it from prompting you for the password on every SSH command (upload.sh uses rsync which uses ssh). I made a gist of the script I use to upload my public key to new boards.","title":"Upload to your robot"},{"location":"#run-the-software-on-your-robot","text":"First ssh into the onboard computer and cd path/uploaded/to . Before running for the first time, in an ssh shell, install the basic_bot package: python3 -m pip install git+https://github.com/littlebee/basic_bot.git@main Then from within the the directory you uploaded to: ./start.sh will start all of the services in ./services.cfg as individual processes running detached. If your shell/terminal is closed, they will keep running. You can debug issues with a service by looking at the ./logs/* files for each service.","title":"Run the software on your robot"},{"location":"#adding-your-own-ui-too","text":"Ya sure, you betcha! The created my_new_robot_project/webapp is just an example of how to interact with central_hub. You can add your own content or completely replace it with say Next.js if that is your thing. The created ./webapp is currently a Vite app, created with yarn create vite . The -m basic_bot.services.web_server service currently is hard coded (TODO: fix) to look in ./webapp/dist for index.html and the rest is up to the app. If you're want to use another frontend framework, you should be able to symbolic link where ever that framework's bundler puts it's build assets like index.html to ./webapp/dist","title":"Adding your own UI, too?"},{"location":"#will-it-run-on-windows","text":"Answer is IDK, yet. Wherever possible, I've tried to use the cross-platform pure Python file system abstraction. If you look at the start.sh and stop.sh scripts in the root of the created project, you will see that those just call scripts which pip3 install or conda install , via SetupTools should have installed globally assuming pip3 is in your environment. So maybe ./start.sh does nothing on Windows, but bb_start will? Add a .bat file; maybe just rename .sh -> .bat? [Waves arms; not a windows user for years]","title":"Will it run on Windows?"},{"location":"#todo-add-links-to-other-bots-using-their-own-components-as-examples-like-strongarm","text":"","title":"TODO: add links to other bots using their own components as examples (like strongarm)"},{"location":"#how-it-all-works","text":"","title":"How it all works"},{"location":"#todo-add-updated-version-of-how-it-all-works-from-strongarm-scatbot","text":"https://github.com/littlebee/strongarm/blob/main/README.md#how-it-all-works","title":"TODO add updated version of How It All Works from strongarm + scatbot"},{"location":"og_original_goals/","text":"The goals for this project are: 1. provide significantly simpler alternative to ROS 1. run stand-alone; decentralized 1. install and run on small SBCs like raspberry pi 1. distribute a pip package 1. maybe distribute a npm package for the typescript web components 1. simplify getting started on new projects. This would ideally be something like: pip3 install basic_bot python3 basic_bot:create my_new_robot_project which would - - create a project directory ( mkdir my_new_robot_project ) with start, stop, upload scripts; - cd to that directory - create .gitignore file from basic python template with additions for logs/ pids/ etc. - create logs/ directory - create pids/ directory - create src/ directory - create webapp/ directory and populate it with a basic vite starter project in Typescript Much of the design originally will come from https://github.com/littlebee/strongarm and strip it down to just the parts that are used for all bots like central-hub, with optional submodules for things like Raspberry Pi system stats, servo control, motor control, vision, and image object recognition. My intent is to later update strongarm to use this package instead of it's own versions of some of these subsystems.","title":"Og original goals"},{"location":"commons/base_camera/","text":"basic_bot.commons.base_camera This was originally pilfered from https://github.com/adeept/Adeept_RaspTank/blob/a6c45e8cc7df620ad8977845eda2b839647d5a83/server/base_camera.py Which looks like it was in turn pilfered from https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited Thank you, @adeept and @miguelgrinberg! CameraEvent Objects class CameraEvent(object) An Event-like class that signals all active clients when a new frame is available. wait def wait() -> bool Invoked from each client's thread to wait for the next frame. set def set() -> None Invoked by the camera thread when a new frame is available. clear def clear() -> None Invoked from each client's thread after a frame was processed. BaseCamera Objects class BaseCamera(object) BaseCamera is an abstract base class that for camera implementations. It creates a background thread that reads frames from the camera and signals when a new frame is available. frame current frame is stored here by background thread __init__ def __init__() -> None Start the background camera thread if it isn't running yet. get_frame def get_frame() -> Optional[bytes] Return the current camera frame. frames @staticmethod def frames() -> Generator[bytes, None, None] \"Generator that returns frames from the camera. stats @classmethod def stats(cls) -> dict[str, float] Return the fps stats dictionary.","title":"base_camera"},{"location":"commons/base_camera/#basic_botcommonsbase_camera","text":"This was originally pilfered from https://github.com/adeept/Adeept_RaspTank/blob/a6c45e8cc7df620ad8977845eda2b839647d5a83/server/base_camera.py Which looks like it was in turn pilfered from https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited Thank you, @adeept and @miguelgrinberg!","title":"basic_bot.commons.base_camera"},{"location":"commons/base_camera/#cameraevent-objects","text":"class CameraEvent(object) An Event-like class that signals all active clients when a new frame is available.","title":"CameraEvent Objects"},{"location":"commons/base_camera/#wait","text":"def wait() -> bool Invoked from each client's thread to wait for the next frame.","title":"wait"},{"location":"commons/base_camera/#set","text":"def set() -> None Invoked by the camera thread when a new frame is available.","title":"set"},{"location":"commons/base_camera/#clear","text":"def clear() -> None Invoked from each client's thread after a frame was processed.","title":"clear"},{"location":"commons/base_camera/#basecamera-objects","text":"class BaseCamera(object) BaseCamera is an abstract base class that for camera implementations. It creates a background thread that reads frames from the camera and signals when a new frame is available.","title":"BaseCamera Objects"},{"location":"commons/base_camera/#frame","text":"current frame is stored here by background thread","title":"frame"},{"location":"commons/base_camera/#__init__","text":"def __init__() -> None Start the background camera thread if it isn't running yet.","title":"__init__"},{"location":"commons/base_camera/#get_frame","text":"def get_frame() -> Optional[bytes] Return the current camera frame.","title":"get_frame"},{"location":"commons/base_camera/#frames","text":"@staticmethod def frames() -> Generator[bytes, None, None] \"Generator that returns frames from the camera.","title":"frames"},{"location":"commons/base_camera/#stats","text":"@classmethod def stats(cls) -> dict[str, float] Return the fps stats dictionary.","title":"stats"},{"location":"commons/camera_opencv/","text":"basic_bot.commons.camera_opencv An implemation of BaseCamera using OpenCV. OpenCvCamera Objects class OpenCvCamera(BaseCamera) This class implements the BaseCamera interface using OpenCV. Usage: camera = OpenCvCamera() # get_frame() is from BaseCamera and returns a single frame frame = camera.get_frame() # you can then used the fame for example: jpeg = cv2.imencode(\".jpg\", frame)[1].tobytes() frames @staticmethod def frames() -> Generator[bytes, None, None] Generator function that yields frames from the camera. Required by BaseCamera","title":"camera_opencv"},{"location":"commons/camera_opencv/#basic_botcommonscamera_opencv","text":"An implemation of BaseCamera using OpenCV.","title":"basic_bot.commons.camera_opencv"},{"location":"commons/camera_opencv/#opencvcamera-objects","text":"class OpenCvCamera(BaseCamera) This class implements the BaseCamera interface using OpenCV. Usage: camera = OpenCvCamera() # get_frame() is from BaseCamera and returns a single frame frame = camera.get_frame() # you can then used the fame for example: jpeg = cv2.imencode(\".jpg\", frame)[1].tobytes()","title":"OpenCvCamera Objects"},{"location":"commons/camera_opencv/#frames","text":"@staticmethod def frames() -> Generator[bytes, None, None] Generator function that yields frames from the camera. Required by BaseCamera","title":"frames"},{"location":"commons/constants/","text":"basic_bot.commons.constants basic_bot.commons.constants can be imported to access the constants used by basic_bot services. The constants are set by default and most can be overridden by setting environment variables. See the latest version of this file on GitHub for the most recent constants.","title":"constants"},{"location":"commons/constants/#basic_botcommonsconstants","text":"basic_bot.commons.constants can be imported to access the constants used by basic_bot services. The constants are set by default and most can be overridden by setting environment variables. See the latest version of this file on GitHub for the most recent constants.","title":"basic_bot.commons.constants"},{"location":"commons/env/","text":"basic_bot.commons.env Simple utility functions to get typed environment variables with default values. Usage: from basic_bot.commons import env MY_INT = env.env_int(\"MY_INT\", 5800) MY_STRING = env.env_string(\"MY_STRING\", \"default\") MY_FLOAT = env.env_float(\"MY_FLOAT\", 3.14) MY_BOOL = env.env_bool(\"MY_BOOL\", True) env_string def env_string(name: str, default: str) -> str Parse environment variable as string with default value. env_int def env_int(name: str, default: int) -> int Parse environment variable as int with default value. env_float def env_float(name: str, default: float) -> float Parse environment variable as float with default value. env_bool def env_bool(name: str, default: bool) -> bool Parse environment variable as bool with default value.","title":"env"},{"location":"commons/env/#basic_botcommonsenv","text":"Simple utility functions to get typed environment variables with default values. Usage: from basic_bot.commons import env MY_INT = env.env_int(\"MY_INT\", 5800) MY_STRING = env.env_string(\"MY_STRING\", \"default\") MY_FLOAT = env.env_float(\"MY_FLOAT\", 3.14) MY_BOOL = env.env_bool(\"MY_BOOL\", True)","title":"basic_bot.commons.env"},{"location":"commons/env/#env_string","text":"def env_string(name: str, default: str) -> str Parse environment variable as string with default value.","title":"env_string"},{"location":"commons/env/#env_int","text":"def env_int(name: str, default: int) -> int Parse environment variable as int with default value.","title":"env_int"},{"location":"commons/env/#env_float","text":"def env_float(name: str, default: float) -> float Parse environment variable as float with default value.","title":"env_float"},{"location":"commons/env/#env_bool","text":"def env_bool(name: str, default: bool) -> bool Parse environment variable as bool with default value.","title":"env_bool"},{"location":"commons/fps_stats/","text":"basic_bot.commons.fps_stats FpsStats Objects class FpsStats() FpsStats - A class to track overall and floating frames per seconds Instantiate the class to start tracking the stats. Call increment() for each frame read. Call stats() to get the stats. increment def increment() -> None Increment the frame count and calculate the floating fps stats def stats() -> dict[str, float] Return the stats as a dictionary","title":"fps_stats"},{"location":"commons/fps_stats/#basic_botcommonsfps_stats","text":"","title":"basic_bot.commons.fps_stats"},{"location":"commons/fps_stats/#fpsstats-objects","text":"class FpsStats() FpsStats - A class to track overall and floating frames per seconds Instantiate the class to start tracking the stats. Call increment() for each frame read. Call stats() to get the stats.","title":"FpsStats Objects"},{"location":"commons/fps_stats/#increment","text":"def increment() -> None Increment the frame count and calculate the floating fps","title":"increment"},{"location":"commons/fps_stats/#stats","text":"def stats() -> dict[str, float] Return the stats as a dictionary","title":"stats"},{"location":"commons/hub_state/","text":"basic_bot.commons.hub_state HubState Objects class HubState() This class manages the local state of the hub. It is initialized with a default initial state and can be updated with new state data. __init__ def __init__(default_state: Dict[str, Any] = {}) -> None Initializes the hub state with the default state. get def get(keys_requested: List[str]) -> Dict[str, Any] Return the requested state data for a list of state keys. update_state_from_message_data def update_state_from_message_data(message_data: Dict[str, Any]) -> None Update state from received message data. serialize_state def serialize_state(keys_requested: Optional[List[str]] = None) -> str Serialize the current state to JSON.","title":"hub_state"},{"location":"commons/hub_state/#basic_botcommonshub_state","text":"","title":"basic_bot.commons.hub_state"},{"location":"commons/hub_state/#hubstate-objects","text":"class HubState() This class manages the local state of the hub. It is initialized with a default initial state and can be updated with new state data.","title":"HubState Objects"},{"location":"commons/hub_state/#__init__","text":"def __init__(default_state: Dict[str, Any] = {}) -> None Initializes the hub state with the default state.","title":"__init__"},{"location":"commons/hub_state/#get","text":"def get(keys_requested: List[str]) -> Dict[str, Any] Return the requested state data for a list of state keys.","title":"get"},{"location":"commons/hub_state/#update_state_from_message_data","text":"def update_state_from_message_data(message_data: Dict[str, Any]) -> None Update state from received message data.","title":"update_state_from_message_data"},{"location":"commons/hub_state/#serialize_state","text":"def serialize_state(keys_requested: Optional[List[str]] = None) -> str Serialize the current state to JSON.","title":"serialize_state"},{"location":"commons/hub_state_monitor/","text":"basic_bot.commons.hub_state_monitor HubStateMonitor Objects class HubStateMonitor() This class updates the process local copy of the hub state as subscribed keys are changed. It starts a thread to listen for state updates from the central hub and applies them to the local state via hub_state.update_state_from_message_data. Before applying the state update, it calls the on_state_update callback if it is provided. This allows the caller to do something with the state update before before it is applied to the local state passed via hub_state arg. The state update is applied to the local state via hub_state.update_state_from_message_data regardless of whether the on_state_update callback is provided or the value it returns. To alter the state you should alway send an updateState message to the central hub. Usage: from basic_bot.commons.hub_state import HubState from basic_bot.commons.hub_state_monitor import HubStateMonitor hub_state = HubState({\"test_key\": \"test_value\"}) monitor = HubStateMonitor(hub_state, \"test_identity\", [\"test_key\"]) monitor.start() For a more complex example using callbacks, see usage in daphbot example - daphbot_service __init__ def __init__( hub_state: HubState, identity: str, subscribed_keys: Union[List[str], Literal[\"*\"]], on_connect: Optional[Callable[ [WebSocketClientProtocol], None, ]] = None, on_state_update: Optional[Callable[ [ WebSocketClientProtocol, str, dict, ], None, ]] = None ) -> None Instantiate a HubStateMonitor object. start def start() -> None Starts the background thread that listens for state updates and updates HubState stop def stop() -> None Stops the background thread that listens for state updates and updates HubState","title":"hub_state_monitor"},{"location":"commons/hub_state_monitor/#basic_botcommonshub_state_monitor","text":"","title":"basic_bot.commons.hub_state_monitor"},{"location":"commons/hub_state_monitor/#hubstatemonitor-objects","text":"class HubStateMonitor() This class updates the process local copy of the hub state as subscribed keys are changed. It starts a thread to listen for state updates from the central hub and applies them to the local state via hub_state.update_state_from_message_data. Before applying the state update, it calls the on_state_update callback if it is provided. This allows the caller to do something with the state update before before it is applied to the local state passed via hub_state arg. The state update is applied to the local state via hub_state.update_state_from_message_data regardless of whether the on_state_update callback is provided or the value it returns. To alter the state you should alway send an updateState message to the central hub. Usage: from basic_bot.commons.hub_state import HubState from basic_bot.commons.hub_state_monitor import HubStateMonitor hub_state = HubState({\"test_key\": \"test_value\"}) monitor = HubStateMonitor(hub_state, \"test_identity\", [\"test_key\"]) monitor.start() For a more complex example using callbacks, see usage in daphbot example - daphbot_service","title":"HubStateMonitor Objects"},{"location":"commons/hub_state_monitor/#__init__","text":"def __init__( hub_state: HubState, identity: str, subscribed_keys: Union[List[str], Literal[\"*\"]], on_connect: Optional[Callable[ [WebSocketClientProtocol], None, ]] = None, on_state_update: Optional[Callable[ [ WebSocketClientProtocol, str, dict, ], None, ]] = None ) -> None Instantiate a HubStateMonitor object.","title":"__init__"},{"location":"commons/hub_state_monitor/#start","text":"def start() -> None Starts the background thread that listens for state updates and updates HubState","title":"start"},{"location":"commons/hub_state_monitor/#stop","text":"def stop() -> None Stops the background thread that listens for state updates and updates HubState","title":"stop"},{"location":"commons/log/","text":"basic_bot.commons.log Simple methods for logging messages to console with timestamps and \"INFO\", \"DEBUG\", \"ERROR\" prefixes. These methods ensure that the last message is flushed to console. bb_start , which is used to run services in the background, will redirect all stdout and stderr to a log file. debug def debug(message: str) -> None Flush DEBUG: message to console only in development and test environments info def info(message: str) -> None Flush INFO: message to console error def error(message: str) -> None Flush ERROR: message to console","title":"log"},{"location":"commons/log/#basic_botcommonslog","text":"Simple methods for logging messages to console with timestamps and \"INFO\", \"DEBUG\", \"ERROR\" prefixes. These methods ensure that the last message is flushed to console. bb_start , which is used to run services in the background, will redirect all stdout and stderr to a log file.","title":"basic_bot.commons.log"},{"location":"commons/log/#debug","text":"def debug(message: str) -> None Flush DEBUG: message to console only in development and test environments","title":"debug"},{"location":"commons/log/#info","text":"def info(message: str) -> None Flush INFO: message to console","title":"info"},{"location":"commons/log/#error","text":"def error(message: str) -> None Flush ERROR: message to console","title":"error"},{"location":"commons/messages/","text":"basic_bot.commons.messages Functions from this module are used to send messages to the central_hub via websockets. MessageType Objects class MessageType(Enum) Message types for communication to/from central_hub. send_message async def send_message(websocket: Any, message: Dict[str, Any]) -> None Send a message in the form of a dictionary to central_hub. send_identity async def send_identity(websocket: Any, name: str) -> None Send the identity type message to central_hub. Name should uniquely identify the service. send_subscribe async def send_subscribe( websocket: Any, subscriptionNames: Union[List[str], Literal[\"*\"]]) -> None Send the subscribeState message type to central_hub. subscriptionNames should be an array of keys to subscribe or \"*\" to subscribe to all keys. send_get_state async def send_get_state(websocket: Any, keys: Optional[List[str]] = []) -> None Send the getState message type to central_hub optionally specifying a list of keys to get the state. send_update_state async def send_update_state(websocket: Any, stateData: Dict[str, Any]) -> None Send the updateState message type to central_hub with the key->value state data to update.","title":"messages"},{"location":"commons/messages/#basic_botcommonsmessages","text":"Functions from this module are used to send messages to the central_hub via websockets.","title":"basic_bot.commons.messages"},{"location":"commons/messages/#messagetype-objects","text":"class MessageType(Enum) Message types for communication to/from central_hub.","title":"MessageType Objects"},{"location":"commons/messages/#send_message","text":"async def send_message(websocket: Any, message: Dict[str, Any]) -> None Send a message in the form of a dictionary to central_hub.","title":"send_message"},{"location":"commons/messages/#send_identity","text":"async def send_identity(websocket: Any, name: str) -> None Send the identity type message to central_hub. Name should uniquely identify the service.","title":"send_identity"},{"location":"commons/messages/#send_subscribe","text":"async def send_subscribe( websocket: Any, subscriptionNames: Union[List[str], Literal[\"*\"]]) -> None Send the subscribeState message type to central_hub. subscriptionNames should be an array of keys to subscribe or \"*\" to subscribe to all keys.","title":"send_subscribe"},{"location":"commons/messages/#send_get_state","text":"async def send_get_state(websocket: Any, keys: Optional[List[str]] = []) -> None Send the getState message type to central_hub optionally specifying a list of keys to get the state.","title":"send_get_state"},{"location":"commons/messages/#send_update_state","text":"async def send_update_state(websocket: Any, stateData: Dict[str, Any]) -> None Send the updateState message type to central_hub with the key->value state data to update.","title":"send_update_state"},{"location":"commons/persist_state/","text":"basic_bot.commons.persist_state PersistState Objects class PersistState() Class to handle persisting the bot state to a file. __init__ def __init__(hub_state: HubState, file_path: str, persisted_state_keys: List[str]) -> None Initialize the PersistState object and load the persisted state from the file if it exists. Arguments : hub_state: the hub state object instance to persist file_path: the file path to persist the state to persisted_state_keys: the keys to persist to the file Usage: from basic_bot.commons.hub_state import HubState from basic_bot.commons.persist_state import PersistState # initialize the hub state hub_state = HubState({ \"test_key\": \"test_value\", \"some_other_key\": \"some_other_value\" }) # hub_state will be updated with the persisted state if the file exists persist = PersistState(hub_state, \"./my_service_persisted.json\", [\"test_key\"]) # ... do something that updates the hub_state persist.persist_state() persist_state def persist_state() -> None Persist the current state to a file.","title":"persist_state"},{"location":"commons/persist_state/#basic_botcommonspersist_state","text":"","title":"basic_bot.commons.persist_state"},{"location":"commons/persist_state/#persiststate-objects","text":"class PersistState() Class to handle persisting the bot state to a file.","title":"PersistState Objects"},{"location":"commons/persist_state/#__init__","text":"def __init__(hub_state: HubState, file_path: str, persisted_state_keys: List[str]) -> None Initialize the PersistState object and load the persisted state from the file if it exists. Arguments : hub_state: the hub state object instance to persist file_path: the file path to persist the state to persisted_state_keys: the keys to persist to the file Usage: from basic_bot.commons.hub_state import HubState from basic_bot.commons.persist_state import PersistState # initialize the hub state hub_state = HubState({ \"test_key\": \"test_value\", \"some_other_key\": \"some_other_value\" }) # hub_state will be updated with the persisted state if the file exists persist = PersistState(hub_state, \"./my_service_persisted.json\", [\"test_key\"]) # ... do something that updates the hub_state persist.persist_state()","title":"__init__"},{"location":"commons/persist_state/#persist_state","text":"def persist_state() -> None Persist the current state to a file.","title":"persist_state"},{"location":"commons/recognition_provider/","text":"basic_bot.commons.recognition_provider RecognitionProvider Objects class RecognitionProvider() This class detects objects in frames it gets from the camera object passed to the constructor. It uses the TFLiteDetect class to detect objects in the frames. It sends the detected objects to the central hub via a websocket connection using the recognition key To use, simply instantiate it: from basic_bot.commons.recognition_provider import RecognitionProvider from basic_bot.commons.camera_opencv import OpenCvCamera camera = OpenCvCamera() recognition_provider = RecognitionProvider(camera) __init__ def __init__(camera: Any) -> None Constructor get_objects def get_objects() -> List[Dict[str, Any]] Return the last objects seen get_next_objects def get_next_objects() -> List[Dict[str, Any]] Wait for and return the next objects seen pause def pause() -> None Pause the recognition thread resume def resume() -> None Resume the recognition thread stats @classmethod def stats(cls) -> Dict[str, Any] Return the fps stats dictionary.","title":"recognition_provider"},{"location":"commons/recognition_provider/#basic_botcommonsrecognition_provider","text":"","title":"basic_bot.commons.recognition_provider"},{"location":"commons/recognition_provider/#recognitionprovider-objects","text":"class RecognitionProvider() This class detects objects in frames it gets from the camera object passed to the constructor. It uses the TFLiteDetect class to detect objects in the frames. It sends the detected objects to the central hub via a websocket connection using the recognition key To use, simply instantiate it: from basic_bot.commons.recognition_provider import RecognitionProvider from basic_bot.commons.camera_opencv import OpenCvCamera camera = OpenCvCamera() recognition_provider = RecognitionProvider(camera)","title":"RecognitionProvider Objects"},{"location":"commons/recognition_provider/#__init__","text":"def __init__(camera: Any) -> None Constructor","title":"__init__"},{"location":"commons/recognition_provider/#get_objects","text":"def get_objects() -> List[Dict[str, Any]] Return the last objects seen","title":"get_objects"},{"location":"commons/recognition_provider/#get_next_objects","text":"def get_next_objects() -> List[Dict[str, Any]] Wait for and return the next objects seen","title":"get_next_objects"},{"location":"commons/recognition_provider/#pause","text":"def pause() -> None Pause the recognition thread","title":"pause"},{"location":"commons/recognition_provider/#resume","text":"def resume() -> None Resume the recognition thread","title":"resume"},{"location":"commons/recognition_provider/#stats","text":"@classmethod def stats(cls) -> Dict[str, Any] Return the fps stats dictionary.","title":"stats"},{"location":"commons/servo/","text":"basic_bot.commons.servo Servo Objects class Servo() This class controls a single servo motor using the Adafruit PCA9685 servo controller. It uses a background thread to move the motor to a destination angle at a give fraction of the motor's range and thereby control the speed. __init__ def __init__(motor_channel: int, motor_range: int = 180, min_angle: int = 0, max_angle: int = 180) -> None Constructor current_angle @property def current_angle() -> float Returns the current angle of the servo motor step_delay @property def step_delay() -> float Returns the current step delay step_delay @step_delay.setter def step_delay(value: float) -> None Sets the step delay move_to def move_to(angle: float) -> None Move the servo to the specified angle pause def pause() -> None Pause the servo movement resume def resume() -> None Resume the servo movement stop_thread def stop_thread() -> None Stop the servo movement thread wait_for_motor_stopped def wait_for_motor_stopped() -> None Wait for the motor to stop moving","title":"servo"},{"location":"commons/servo/#basic_botcommonsservo","text":"","title":"basic_bot.commons.servo"},{"location":"commons/servo/#servo-objects","text":"class Servo() This class controls a single servo motor using the Adafruit PCA9685 servo controller. It uses a background thread to move the motor to a destination angle at a give fraction of the motor's range and thereby control the speed.","title":"Servo Objects"},{"location":"commons/servo/#__init__","text":"def __init__(motor_channel: int, motor_range: int = 180, min_angle: int = 0, max_angle: int = 180) -> None Constructor","title":"__init__"},{"location":"commons/servo/#current_angle","text":"@property def current_angle() -> float Returns the current angle of the servo motor","title":"current_angle"},{"location":"commons/servo/#step_delay","text":"@property def step_delay() -> float Returns the current step delay","title":"step_delay"},{"location":"commons/servo/#step_delay_1","text":"@step_delay.setter def step_delay(value: float) -> None Sets the step delay","title":"step_delay"},{"location":"commons/servo/#move_to","text":"def move_to(angle: float) -> None Move the servo to the specified angle","title":"move_to"},{"location":"commons/servo/#pause","text":"def pause() -> None Pause the servo movement","title":"pause"},{"location":"commons/servo/#resume","text":"def resume() -> None Resume the servo movement","title":"resume"},{"location":"commons/servo/#stop_thread","text":"def stop_thread() -> None Stop the servo movement thread","title":"stop_thread"},{"location":"commons/servo/#wait_for_motor_stopped","text":"def wait_for_motor_stopped() -> None Wait for the motor to stop moving","title":"wait_for_motor_stopped"},{"location":"commons/tflite_detect/","text":"basic_bot.commons.tflite_detect TFLiteDetect Objects class TFLiteDetect() This class provides object detection using Tensor Flow Lite. __init__ def __init__(model: Optional[str] = None, use_coral_tpu: Optional[bool] = None) -> None Constructor Arguments : model: the path to the tflite model file use_coral_tpu: whether to use the Coral TPU for inference get_prediction def get_prediction(img: Any) -> List[Dict[str, Any]] Given an image array, return a list of detected objects. Each detected object is a dictionary with the following: boundingBox: [x1, y1, x2, y2] classification: string confidence: float (0-1)","title":"tflite_detect"},{"location":"commons/tflite_detect/#basic_botcommonstflite_detect","text":"","title":"basic_bot.commons.tflite_detect"},{"location":"commons/tflite_detect/#tflitedetect-objects","text":"class TFLiteDetect() This class provides object detection using Tensor Flow Lite.","title":"TFLiteDetect Objects"},{"location":"commons/tflite_detect/#__init__","text":"def __init__(model: Optional[str] = None, use_coral_tpu: Optional[bool] = None) -> None Constructor Arguments : model: the path to the tflite model file use_coral_tpu: whether to use the Coral TPU for inference","title":"__init__"},{"location":"commons/tflite_detect/#get_prediction","text":"def get_prediction(img: Any) -> List[Dict[str, Any]] Given an image array, return a list of detected objects. Each detected object is a dictionary with the following: boundingBox: [x1, y1, x2, y2] classification: string confidence: float (0-1)","title":"get_prediction"},{"location":"commons/web_utils/","text":"basic_bot.commons.web_utils Utility functions for handling Flask web responses and requests. json_response def json_response(app, data) Return a JSON response. respond_ok def respond_ok(app, data=None) Return a JSON response with status ok. respond_not_ok def respond_not_ok(app, status, data) Return a JSON response with status not ok.","title":"web_utils"},{"location":"commons/web_utils/#basic_botcommonsweb_utils","text":"Utility functions for handling Flask web responses and requests.","title":"basic_bot.commons.web_utils"},{"location":"commons/web_utils/#json_response","text":"def json_response(app, data) Return a JSON response.","title":"json_response"},{"location":"commons/web_utils/#respond_ok","text":"def respond_ok(app, data=None) Return a JSON response with status ok.","title":"respond_ok"},{"location":"commons/web_utils/#respond_not_ok","text":"def respond_not_ok(app, status, data) Return a JSON response with status not ok.","title":"respond_not_ok"},{"location":"scripts/bb_create/","text":"basic_bot.bb_create Usage: bb_create <new_project_directory_name> Description: Create a new robot project directory with the given name. The new project will contain a basic bot project structure with some example code and scripts to get you started. The new project will be created in the current working directory.","title":"bb_create"},{"location":"scripts/bb_create/#basic_botbb_create","text":"Usage: bb_create <new_project_directory_name> Description: Create a new robot project directory with the given name. The new project will contain a basic bot project structure with some example code and scripts to get you started. The new project will be created in the current working directory.","title":"basic_bot.bb_create"},{"location":"scripts/bb_restart/","text":"basic_bot.bb_restart","title":"bb_restart"},{"location":"scripts/bb_restart/#basic_botbb_restart","text":"","title":"basic_bot.bb_restart"},{"location":"scripts/bb_start/","text":"basic_bot.bb_start bb_start is a script to start services in the background. It reads a list of services from the 'services.cfg' file or from the command line arguments file. stdout and stderr are redirected to log files in the 'logs' directory. The PID of each service is written to a file in the 'pids' directory and used by the bb_stop script to stop the service. Usage: bb_start [service] [service] [...]","title":"bb_start"},{"location":"scripts/bb_start/#basic_botbb_start","text":"bb_start is a script to start services in the background. It reads a list of services from the 'services.cfg' file or from the command line arguments file. stdout and stderr are redirected to log files in the 'logs' directory. The PID of each service is written to a file in the 'pids' directory and used by the bb_stop script to stop the service. Usage: bb_start [service] [service] [...]","title":"basic_bot.bb_start"},{"location":"scripts/bb_stop/","text":"basic_bot.bb_stop bb_stop is a script to stop services running in the background that where started by bb_start . It reads a list of services from the 'services.cfg' file or from the command line. Usage: bb_stop [service] [service] [...]","title":"bb_stop"},{"location":"scripts/bb_stop/#basic_botbb_stop","text":"bb_stop is a script to stop services running in the background that where started by bb_start . It reads a list of services from the 'services.cfg' file or from the command line. Usage: bb_stop [service] [service] [...]","title":"basic_bot.bb_stop"},{"location":"services/central_hub/","text":"basic_bot.services.central_hub Provides an ultra-light pub/sub service with < 10ms latecy over websockets. The state of published keys is maintained in memory. This python process is meant to be run as a service by basic_bot. You can also run it in the foreground for debugging purposes. ex: python3 -m basic_bot.services.central_hub Central hub is also the publisher of several state keys: { \"hub_stats\": { \"state_updates_recv\": 0 }, \"subsystem_stats\": {} }","title":"central_hub"},{"location":"services/central_hub/#basic_botservicescentral_hub","text":"Provides an ultra-light pub/sub service with < 10ms latecy over websockets. The state of published keys is maintained in memory. This python process is meant to be run as a service by basic_bot. You can also run it in the foreground for debugging purposes. ex: python3 -m basic_bot.services.central_hub Central hub is also the publisher of several state keys: { \"hub_stats\": { \"state_updates_recv\": 0 }, \"subsystem_stats\": {} }","title":"basic_bot.services.central_hub"},{"location":"services/motor_control_2w/","text":"basic_bot.services.motor_control_2w Provides motor control for a 2-wheel drive robot via the central_hub key: \"throttles\". Sending a state update to the central_hub, for example: { \"throttles\": { \"left\": 0.5, \"right\": 0.5 } } ...would set the left and right throttles to half ahead. You can also set the throttles to negative values >= -1 to go in reverse. The motor control will send a state update back to the central_hub with the current state of the motors, for example: { \"motors\": { \"left\": 0.5, \"right\": 0.5 } }","title":"motor_control_2w"},{"location":"services/motor_control_2w/#basic_botservicesmotor_control_2w","text":"Provides motor control for a 2-wheel drive robot via the central_hub key: \"throttles\". Sending a state update to the central_hub, for example: { \"throttles\": { \"left\": 0.5, \"right\": 0.5 } } ...would set the left and right throttles to half ahead. You can also set the throttles to negative values >= -1 to go in reverse. The motor control will send a state update back to the central_hub with the current state of the motors, for example: { \"motors\": { \"left\": 0.5, \"right\": 0.5 } }","title":"basic_bot.services.motor_control_2w"},{"location":"services/vision_cv2/","text":"basic_bot.services.vision_cv2 Provide image feed and object recognition based on open-cv for the video capture input. This service will provide a list of objects and their bounding boxes in the image feed via central hub. A vision feed is provided via http:// : /video_feed that can be used in an HTML 'img' element. The image feed is a multipart jpeg stream (for now; TODO: reassess this). Assuming that the vision service is running on the same host machine as the browser client location, you can do something like: <img src=\"http://localhost:5001/video_feed\" /> The following data is provided to central_hub as fast as image capture and recognition can be done: { \"recognition\": [ { \"bounding_box\": [x1, y1, x2, y2], \"classification\": \"person\", \"confidence\": 0.99 }, { \"bounding_box\": [x1, y1, x2, y2], \"classification\": \"dog\", \"confidence\": 0.75 } ] } The [x1, y1, x2, y2] bounding box above is actually sent as the numeric values of the bounding box in the image. Origin: This was originally pilfered from https://github.com/adeept/Adeept_RaspTank/blob/a6c45e8cc7df620ad8977845eda2b839647d5a83/server/app.py Which looks like it was in turn pilfered from https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited Thank you, @adeept and @miguelgrinberg! gen_rgb_video def gen_rgb_video(camera: OpenCvCamera) -> Generator[bytes, None, None] Video streaming generator function. video_feed @app.route(\"/video_feed\") def video_feed() -> Response Video streaming route. Put this in the src attribute of an img tag.","title":"vision_cv2"},{"location":"services/vision_cv2/#basic_botservicesvision_cv2","text":"Provide image feed and object recognition based on open-cv for the video capture input. This service will provide a list of objects and their bounding boxes in the image feed via central hub. A vision feed is provided via http:// : /video_feed that can be used in an HTML 'img' element. The image feed is a multipart jpeg stream (for now; TODO: reassess this). Assuming that the vision service is running on the same host machine as the browser client location, you can do something like: <img src=\"http://localhost:5001/video_feed\" /> The following data is provided to central_hub as fast as image capture and recognition can be done: { \"recognition\": [ { \"bounding_box\": [x1, y1, x2, y2], \"classification\": \"person\", \"confidence\": 0.99 }, { \"bounding_box\": [x1, y1, x2, y2], \"classification\": \"dog\", \"confidence\": 0.75 } ] } The [x1, y1, x2, y2] bounding box above is actually sent as the numeric values of the bounding box in the image. Origin: This was originally pilfered from https://github.com/adeept/Adeept_RaspTank/blob/a6c45e8cc7df620ad8977845eda2b839647d5a83/server/app.py Which looks like it was in turn pilfered from https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited Thank you, @adeept and @miguelgrinberg!","title":"basic_bot.services.vision_cv2"},{"location":"services/vision_cv2/#gen_rgb_video","text":"def gen_rgb_video(camera: OpenCvCamera) -> Generator[bytes, None, None] Video streaming generator function.","title":"gen_rgb_video"},{"location":"services/vision_cv2/#video_feed","text":"@app.route(\"/video_feed\") def video_feed() -> Response Video streaming route. Put this in the src attribute of an img tag.","title":"video_feed"},{"location":"services/web_server/","text":"basic_bot.services.web_server Simple http server for serving the react web app from build dir","title":"web_server"},{"location":"services/web_server/#basic_botservicesweb_server","text":"Simple http server for serving the react web app from build dir","title":"basic_bot.services.web_server"}]}